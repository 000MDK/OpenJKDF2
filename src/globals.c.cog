#include "globals.h"

#include "General/stdStrTable.h"
#include "Primitives/rdModel3.h"
#include "Primitives/rdVector.h"
#include "Primitives/rdMatrix.h"
#include "Primitives/rdFace.h"
#include "Engine/rdCache.h"
#include "Engine/rdKeyframe.h"
#include "Engine/sithRender.h"
#include "World/sithWorld.h"
#include "World/sithSector.h"
#include "World/sithThing.h"

#ifdef NO_JK_MMAP
// Vars
[[[cog
    import cog

    f = open(symbols_fpath, "r")
    for line in f.readlines():
        if "//" in line:
            line = line.split("//")[0]
        if "#" in line:
            line = line.split("#")[0]
        parts = line.replace("\n", "").replace("\r", "").split(" ")
        if len(parts) < 3:
            continue
        
        name = parts[0]
        addr = parts[1]
        c_type = " ".join(parts[2:])
        c_type_post = ""
        c_val = "";
        
        if "=" in c_type:
            c_val = c_type.split("=")[1]
            c_type = c_type.split("=")[0]
        
        if c_type == "func":
            continue
        
        if c_val == "":
            if c_type == "int":
                c_val = "0"
            elif c_type == "float":
                c_val = "0.0f"
            elif c_type == "double":
                c_val = "0.0f"
            elif "*" in c_type and "[" not in c_type:
                c_val = "NULL"
            else:
                c_val = "{0}"
        
        if "[" in c_type:
            s = c_type.split("[")
            c_type = s[0]
            c_type_post = "[" + s[1] 
        
        cog.outl("%s %s%s = %s;" % (c_type, name, c_type_post, c_val))

]]]
[[[end]]]
#endif

[[[cog
    import cog
    import glob
    import os
    from pathlib import Path
    
    embed_files = glob.glob(str(Path(project_root) / "resource" / "shaders" / "*.glsl"))
    cog.outl("const size_t embeddedResource_aFiles_num = %d;" % (len(embed_files),))
    cog.outl("const embeddedResource_t embeddedResource_aFiles[%d] = {" % (len(embed_files),))

    for fpath in embed_files:
        fpath_ = fpath.replace(str(Path(project_root)) + os.sep, "").replace("\\", "/")
        fname = os.path.basename(fpath)
        contents = open(fpath, "r").read()

        contents = contents.replace("\n", "\\n")

        cog.outl("{\"%s\", \"%s\", 0x%x}," % (fpath_, contents, len(contents)))

    cog.outl("};")

]]]
[[[end]]]