CC := emcc
TARGET := openjkdf2.js
OBJ := build_emcc

OPENJKDF2_NO_ASAN := 1
TARGET_USE_LIBSMACKER := 1
TARGET_USE_SDL2 := 1

include sources.mk

LDFLAGS := -s USE_SDL=2 -s WASM=1 -s USE_SDL_MIXER=2 -s ALLOW_MEMORY_GROWTH=1 -s FULL_ES3=1 -s ASYNCIFY --profiling --preload-file $(ROOT_DIR)/wasm_out@/
CFLAGS := -s USE_SDL=2 -s USE_SDL_MIXER=2

LDFLAGS += -g -O2 -lm -lSDL2 -lSDL2_mixer -lGL -lGLEW -lopenal -fshort-wchar
CFLAGS += -g -O2 -I$(ROOT_DIR)/$(SRC) -I$(ROOT_DIR)/$(SRC)/external/libsmacker -DQOL_IMPROVEMENTS -DLINUX -DPLATFORM_POSIX -DOPENAL_SOUND -DSDL2_RENDER -DARCH_WASM -Wuninitialized -fshort-wchar -Wall -Wno-unused-variable -Wno-parentheses -Wno-missing-braces 

# WASM can't have blobs nor mmap equivalence
CFLAGS += -DLINUX_TMP -fno-exceptions -DARCH_WASM
LDFLAGS += -DLINUX_TMP -fno-exceptions -DARCH_WASM
CFLAGS += -DNO_JK_MMAP
LDFLAGS += -DNO_JK_MMAP

all: $(TARGET)
include common.mk

$(OBJ)/%.o: $(SRC)/%.c | $(OBJ) initial
	@mkdir -p $(dir $@)
	$(CC) -c -g -o $@ $< $(CFLAGS)

$(TARGET): $(OBJECTS)
	rm -f wasm_out/openjkdf2.data
	rm -f wasm_out/*.html
	rm -f wasm_out/*.js
	rm -f wasm_out/*.wasm
	cp resource/shaders/* wasm_out/resource/shaders/
	$(CC) -o $@ -g $^ $(LDFLAGS)
	mkdir -p wasm_out
	cp packaging/wasm/index.html wasm_out/index.html
	mv openjkdf2.js wasm_out
	mv openjkdf2.wasm wasm_out
	mv openjkdf2.data wasm_out
