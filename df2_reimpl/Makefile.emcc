CC := emcc
TARGET := openjkdf2.wasm

SRC := src
OBJ := build_emcc

SOURCES := $(wildcard $(SRC)/*.c $(SRC)/*/*.c) #$(SRC)/Cog/lex.yy.c $(SRC)/Cog/y.tab.c
OBJECTS := $(patsubst $(SRC)/%.c, $(OBJ)/%.o, $(SOURCES))
ROOT_DIR := $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))

#-Wl,-T$(LINKER_SCRIPT_SYMS)
LDFLAGS := -s USE_SDL=2 -s WASM=1
CFLAGS := -s USE_SDL=2 -s WASM=1

LDFLAGS += -Wl,-Map=output-emcc.map -lm -lSDL2 -lGL -lGLEW -lopenal -lalut -fshort-wchar
CFLAGS += -I$(ROOT_DIR)/$(SRC) -DQOL_IMPROVEMENTS -DLINUX -DNULL_SOUND -Wuninitialized -fshort-wchar -Wall -Wno-unused-variable -Wno-parentheses -Wno-missing-braces 

# Comment out these lines to use JK.EXE as a binary blob
CFLAGS += -DLINUX_TMP -fno-exceptions -DARCH_WASM
LDFLAGS += -DLINUX_TMP -fno-exceptions -DARCH_WASM

# Comment out to use JK.EXE for .data/.rodata
CFLAGS += -DNO_JK_MMAP
LDFLAGS += -DNO_JK_MMAP

all: $(TARGET)
include common.mk

$(OBJ)/%.o: $(SRC)/%.c | $(OBJ) initial
	@mkdir -p $(dir $@)
	$(CC) -c -g -o $@ $< $(CFLAGS)

$(TARGET): $(OBJECTS)
	$(CC) -o $@ -g $^ $(LDFLAGS)
