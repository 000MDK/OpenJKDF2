CC := gcc
TARGET := openjkdf2

SRC := src
OBJ := build_linux

SOURCES := $(wildcard $(SRC)/*.c $(SRC)/*/*.c) #$(SRC)/Cog/lex.yy.c $(SRC)/Cog/y.tab.c
SOURCES += $(SRC)/external/libsmacker/smacker.c $(SRC)/external/libsmacker/smk_bitstream.c $(SRC)/external/libsmacker/smk_hufftree.c
OBJECTS := $(patsubst $(SRC)/%.c, $(OBJ)/%.o, $(SOURCES))
ROOT_DIR := $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))

FLEX_BIN := $(ROOT_DIR)/flex/flex
YACC_BIN := $(ROOT_DIR)/byacc/yacc

GLOBALS_C := $(ROOT_DIR)/$(SRC)/globals.c
GLOBALS_C_COG := $(ROOT_DIR)/$(SRC)/globals.c.cog

GLOBALS_H := $(ROOT_DIR)/$(SRC)/globals.h
GLOBALS_H_COG := $(ROOT_DIR)/$(SRC)/globals.h.cog

LINKER_SCRIPT_SYMS := $(ROOT_DIR)/symbols.ld
LINKER_SCRIPT_SYMS_COG := $(ROOT_DIR)/symbols.ld.cog

SYMBOLS_FILE := $(ROOT_DIR)/symbols.syms

CFLAGS := -m32 -I$(ROOT_DIR)/$(SRC) -I/usr/include/SDL2 -I$(ROOT_DIR)/$(SRC)/external/libsmacker -DQOL_IMPROVEMENTS -DLINUX -DOPENAL_SOUND -Wuninitialized -fshort-wchar -Wall -Wno-unused-variable -Wno-parentheses -Wno-missing-braces 
LDFLAGS := -Wl,-Map=output-linux.map -lm -lSDL2 -lSDL2_mixer -lGL -lGLEW -lopenal -lalut -fshort-wchar

# Optional: Use JK.EXE as a binary blob for unimplemented functions
ifneq ($(OPENJKDF2_USE_BLOBS), 1)
	CFLAGS += -fsanitize=address -fsanitize=float-divide-by-zero -DLINUX_TMP
	LDFLAGS += -fsanitize=address -fsanitize=float-divide-by-zero -DLINUX_TMP
	CFLAGS += -DNO_JK_MMAP
	LDFLAGS += -DNO_JK_MMAP
endif

all: initial $(OBJ) $(TARGET)

clean:
	rm -rf $(OBJ)
	rm -f $(TARGET)
	rm -f $(SRC)/Cog/lex.yy.c $(SRC)/Cog/y.tab.c
	rm -f $(GLOBALS_C)
	rm -f $(GLOBALS_H)
	rm -f $(LINKER_SCRIPT_SYMS)
	touch $(GLOBALS_C)
	touch $(GLOBALS_H)
	touch -m $(SYMBOLS_FILE)
	touch -m $(GLOBALS_H_COG)
	touch -m $(GLOBALS_C_COG)
	touch $(SRC)/Cog/lex.yy.c
	touch $(SRC)/Cog/y.tab.c

clean_cog:
	rm -f $(SRC)/Cog/lex.yy.c $(SRC)/Cog/y.tab.c

initial: clean_cog $(FLEX_BIN) $(YACC_BIN)
	@echo Generating COG lex/yacc...
	cd $(SRC)/Cog && $(FLEX_BIN) -i cog.l
	cd $(SRC)/Cog && $(YACC_BIN) -d cog.y
	@echo Generating globals...
	cog -d -D symbols_fpath="$(SYMBOLS_FILE)" $(GLOBALS_H_COG) > $(GLOBALS_H)
	cog -d -D symbols_fpath="$(SYMBOLS_FILE)" $(GLOBALS_C_COG) > $(GLOBALS_C)

$(OBJ):
	@mkdir -p $(OBJ)

$(FLEX_BIN):
	cd $(ROOT_DIR)/flex && make

$(YACC_BIN):
	cd $(ROOT_DIR)/byacc && make

$(OBJ)/%.o: $(SRC)/%.c
	@mkdir -p $(dir $@)
	$(CC) -c -g -o $@ $< $(CFLAGS)

$(TARGET): $(OBJECTS)
	$(CC) -m32 -o $@ -g $^ $(LDFLAGS)
