CC := gcc
TARGET := openjkdf2
OBJ := build_linux

OPENJKDF2_NO_ASAN := 1
TARGET_USE_LIBSMACKER := 1
TARGET_USE_SDL2 := 1
TARGET_POSIX := 1
TARGET_USE_OPENGL := 1
TARGET_LINUX := 1

CFLAGS := -m32
LDFLAGS := -Wl,-Map=output-linux.map

include sources.mk

CFLAGS += -D_XOPEN_SOURCE=500 -D_DEFAULT_SOURCE -I$(ROOT_DIR)/$(SRC) -I/usr/include/SDL2 -I$(ROOT_DIR)/$(SRC)/external/libsmacker -DQOL_IMPROVEMENTS -DLINUX -DPLATFORM_POSIX -DOPENAL_SOUND -DSDL2_RENDER -Wuninitialized -fshort-wchar -Wall -Wno-unused-variable -Wno-parentheses -Wno-missing-braces $(shell pkg-config --cflags gtk+-3.0) 
LDFLAGS += -lm -lSDL2 -lSDL2_mixer -lGL -lGLEW -lopenal -fshort-wchar $(shell pkg-config --libs gtk+-3.0) 

# Optional: Use JK.EXE as a binary blob for unimplemented functions
ifneq ($(OPENJKDF2_USE_BLOBS), 1)
	CFLAGS += -DLINUX_TMP
	LDFLAGS += -DLINUX_TMP
	CFLAGS += -DNO_JK_MMAP
	LDFLAGS += -DNO_JK_MMAP
endif

all: $(TARGET)
include common.mk

$(OBJ)/%.o: $(SRC)/%.c | $(OBJ) initial
	@mkdir -p $(dir $@)
	$(CC) -c -g -rdynamic -o $@ $< $(CFLAGS) -std=c11

$(OBJ)/%.o: $(SRC)/%.cpp | $(OBJ) initial
	@mkdir -p $(dir $@)
	$(CC) -c -g -rdynamic -o $@ $< $(CFLAGS) -lstdc++

$(TARGET): $(OBJECTS)
	$(CC) -m32 -o $@ -g -rdynamic $^ $(LDFLAGS)
